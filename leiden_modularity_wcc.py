import snap
import json as json
from matplotlib import pyplot as plt

# This code is used to calculate the modularity of 
# the communities generated by the Leiden algorithm.

def calculateModularity(G, partition):
    m = G.GetEdges() * 1.0
    modularity = 0
    for group in partition:
        size = len(group)
        for x in range(size):
            xNId = group[x]
            xNI = G.GetNI(xNId)
            for y in range(size):
                yNId = group[y]
                yNI = G.GetNI(yNId)
                if x != y:
                    Axy = 0
                    if G.IsEdge(xNId, yNId):
                        Axy = 1
                    modularity += Axy - xNI.GetDeg() * yNI.GetDeg() / (2.0 * m)
    modularity /= 2.0 * m
    return modularity

def calculateWccSimilarity(G, partition):
    MxWcc = snap.GetMxWcc(G)
    numNodes = MxWcc.GetNodes()

    intersection = 0
    total = 0

    for NI in G.Nodes():
        if NI.GetId() in partition[0]:
            intersection += 1
        total += 1

    for NId in partition[0]:
        if not G.IsNode(NId):
            total += 1

    Jaccard = intersection * 1.0 / total

    return numNodes, Jaccard


def analyzePartition(fileName):
    # Load the edge list.
    G = snap.LoadEdgeList(snap.PUNGraph, "/Users/lilyinthesun/Documents/Code/data/" + fileName + ".csv", 0, 1)

    # Load the clusters.
    with open("Leiden/leiden_result_lists_json/leiden_result_lists_" + fileName) as json_data:
        myjson = json.load(json_data)

    # Reformat the partition data into list of lists.
    clusters = []

    for x in range(len(myjson)):
        clusters.append(myjson[x])

    modularity = calculateModularity(G, clusters)
    wccSize, wccJaccard = calculateWccSimilarity(G, clusters)

    print("fileName: %s, modularity: %s, wcc size: %s, wcc Jaccard: %s" % (fileName, modularity, wccSize, wccJaccard))

# datasets = ['Arts', 'Clothing', 'Construction', 'Education', 'Entertainment', 'Health', 'Housing', 'Manufacturing', 'Personal Use', 'Retail', 'Services', 'Transportation', 'Wholesale']
datasets = ['Personal_Use', 'Retail', 'Services', 'Transportation', 'Wholesale']

for dataset in datasets:
    fileName = dataset
    fileName2 = dataset + '_2'
    analyzePartition(fileName)
    analyzePartition(fileName2)
